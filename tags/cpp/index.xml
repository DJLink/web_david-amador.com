<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cpp on David Amador</title>
    <link>https://www.david-amador.com/tags/cpp/</link>
    <description>Recent content in cpp on David Amador</description>
    <image>
      <title>David Amador</title>
      <url>https://www.david-amador.com/david-amador-pixel.png</url>
      <link>https://www.david-amador.com/david-amador-pixel.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Oct 2010 14:09:01 +0000</lastBuildDate>
    <atom:link href="https://www.david-amador.com/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tracking memory leaks in Visual Studio</title>
      <link>https://www.david-amador.com/2010/10/tracking-memory-leaks-in-visual-studio/</link>
      <pubDate>Tue, 19 Oct 2010 14:09:01 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/10/tracking-memory-leaks-in-visual-studio/</guid>
      <description>I just discovered this useful piece of code for all who don’t have (including me) any memory leaks tracking code or software.
I know there are other and better solution but this can be handy for quick findings without much hassle.
First place this code in your entry point file, generally main.cpp inside your main() function
#ifdef _DEBUG int flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG); flag |= _CRTDBG_LEAK_CHECK_DF; // Turn on leak-checking bit _CrtSetDbgFlag(flag); #endif Now just run you game/program as you would normally, in debug mode of course.</description>
      <content:encoded><![CDATA[<p>I just discovered this useful piece of code for all who don’t have (including me) any memory leaks tracking code or software.<br>
I know there are other and better solution but this can be handy for quick findings without much hassle.</p>
<p>First place this code in your entry point file, generally main.cpp inside your main() function</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef _DEBUG
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>	<span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">_CrtSetDbgFlag</span><span class="p">(</span><span class="n">_CRTDBG_REPORT_FLAG</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">flag</span> <span class="o">|=</span> <span class="n">_CRTDBG_LEAK_CHECK_DF</span><span class="p">;</span> <span class="c1">// Turn on leak-checking bit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">_CrtSetDbgFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></div><p>Now just run you game/program as you would normally, in debug mode of course.</p>
<p>After you close it you’ll get a nice log in the output window like this one:</p>
<p><a href="/wp-content/uploads/2010/10/memory_leaks_output.jpg"><img loading="lazy" src="/wp-content/uploads/2010/10/memory_leaks_output.jpg" alt=""  title="memory_leaks_output"  />
</a></p>
<p>See those numbers before each memory leak between brackets? Grab one of those and add this line right before the #endif</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">_CrtSetDbgFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">_CrtSetBreakAlloc</span><span class="p">(</span><span class="mi">689</span><span class="p">);</span> <span class="c1">// Comment or un-comment on need basis
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#endif
</span></span></span></code></pre></div><p>Now run the game again, you shall get a break-point where the {689} memory leak happened.</p>
<p>I hope this is the correct way to use it, if not, let me know.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
