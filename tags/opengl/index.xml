<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opengl on David Amador</title>
    <link>https://djlink.github.io/web_david-amador.com/tags/opengl/</link>
    <description>Recent content in opengl on David Amador</description>
    <image>
      <title>David Amador</title>
      <url>https://djlink.github.io/web_david-amador.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://djlink.github.io/web_david-amador.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Jan 2015 15:20:42 +0000</lastBuildDate>
    <atom:link href="https://djlink.github.io/web_david-amador.com/tags/opengl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QoD XO devlog 2</title>
      <link>https://djlink.github.io/web_david-amador.com/2015/01/qod-xo-devlog-2/</link>
      <pubDate>Sun, 11 Jan 2015 15:20:42 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2015/01/qod-xo-devlog-2/</guid>
      <description>I’ve been tweaking a lot of the gameplay to be suitable to use with a game controller and I’m starting to like the way it’s headed, it’s much more streamlined, faster and easy to use than the first attempt I made, some beta testing with a group of people helped with that.
Last week I started porting the engine to DirectX, yeah it’s that fun moment where nothing works, crashes everywhere.</description>
    </item>
    <item>
      <title>OpenGL Camera 2d with zoom and rotation</title>
      <link>https://djlink.github.io/web_david-amador.com/2013/07/opengl-camera-2d-with-zoom-and-rotation/</link>
      <pubDate>Thu, 11 Jul 2013 12:09:48 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2013/07/opengl-camera-2d-with-zoom-and-rotation/</guid>
      <description>I’ve been working on OpenGL for some time now and one of the things that some people have asked me is how to do that 2d camera with zoom and rotation in a similar way to a post regarding a XNA 2D Camera I wrote some time ago.
Some of them where just subtracting the camera position to all objects drawn, but that’s just ‘ugly’ in my opinion. And the advantage of using a more complicated (at first glance) system as a matrix is that you can easily apply more complicated operations like scaling and rotation.</description>
    </item>
    <item>
      <title>OpenGL 2D Independent Resolution Rendering</title>
      <link>https://djlink.github.io/web_david-amador.com/2013/04/opengl-2d-independent-resolution-rendering/</link>
      <pubDate>Mon, 22 Apr 2013 11:22:22 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2013/04/opengl-2d-independent-resolution-rendering/</guid>
      <description>Around two years ago I made a tutorial for XNA in which you could render 2D games scaled to the current window resolution with proper letter-boxes or pillar-boxes.
As many know since then I moved to C++ and OpenGL, and ocasionally people ask me “Can you still do that independent resolution thing?”, and yes it’s perfectly possible. I’ve used this on all latest Windows, Mac and iOS, in case you are wondering.</description>
    </item>
    <item>
      <title>How to take screenshots in opengl</title>
      <link>https://djlink.github.io/web_david-amador.com/2012/09/how-to-take-screenshot-in-opengl/</link>
      <pubDate>Sat, 08 Sep 2012 16:53:27 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2012/09/how-to-take-screenshot-in-opengl/</guid>
      <description>So here’s some quick code to save a screenshot of your OpenGL game in a TGA file.
&amp;lt;pre lang=&amp;#34;cpp&amp;#34;&amp;gt; bool save_screenshot(string filename, int w, int h) {	//This prevents the images getting padded // when the width multiplied by 3 is not a multiple of 4 glPixelStorei(GL_PACK_ALIGNMENT, 1); int nSize = w*h*3; // First let&amp;#39;s create our buffer, 3 channels per Pixel char* dataBuffer = (char*)malloc(nSize*sizeof(char)); if (!dataBuffer) return false; // Let&amp;#39;s fetch them from the backbuffer	// We request the pixels in GL_BGR format, thanks to Berzeger for the tip glReadPixels((GLint)0, (GLint)0, (GLint)w, (GLint)h, GL_BGR, GL_UNSIGNED_BYTE, dataBuffer); //Now the file creation FILE *filePtr = fopen(filename.</description>
    </item>
    <item>
      <title>Engine, video player and tools, tools tools!</title>
      <link>https://djlink.github.io/web_david-amador.com/2012/01/engine-video-player-and-tools-tools-tools/</link>
      <pubDate>Sun, 29 Jan 2012 19:56:20 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2012/01/engine-video-player-and-tools-tools-tools/</guid>
      <description>So these past 2 weeks I’ve been adding some “bits and bytes” to the engine.
Taking a rest between some more complex game mechanisms I decided to start doing a video player.
After a bit research I decided to choose theora, but a bit skeptic, I’ve used it before on a game company I worked at and I remember being a tiny nightmare, specially because of YUV-&amp;gt;RGB(A) conversion and because of video/audio sync.</description>
    </item>
    <item>
      <title>OpenGL Render to Texture</title>
      <link>https://djlink.github.io/web_david-amador.com/2011/04/opengl-render-to-texture/</link>
      <pubDate>Fri, 29 Apr 2011 09:25:33 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2011/04/opengl-render-to-texture/</guid>
      <description>Render to texture is a very handy functionality.
Imagine your game allows for some character customization. You have the body, some different hats, different clothes and other small stuff. Now the easiest way to render this is to just draw it piece by piece every frame. With the proper Z coordinates everything falls in place.
But you now have like 4-5 draw calls for one single object. Worse, you might have different textures and swamping textures is expensive.</description>
    </item>
    <item>
      <title>Loading images into OpenGL in iPhone</title>
      <link>https://djlink.github.io/web_david-amador.com/2011/03/loading-images-into-opengl-in-iphone/</link>
      <pubDate>Fri, 18 Mar 2011 10:06:24 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2011/03/loading-images-into-opengl-in-iphone/</guid>
      <description>So you can’t make a game without images, right? Well, actually you can but that’s another story.
But how can you load a jpg or a png and use then on OpenGLES?
First let’s make a simple class Texture2D
&amp;lt;pre lang=&amp;#34;cpp&amp;#34;&amp;gt; class Texture2D { public: Texture2D(int id, int width, int height) { _textureId = id; _width = width; _height = height; } virtual ~Texture2D(void) { // Delete Texture from HGL Memory glDeleteTextures(1, ((GLuint*)&amp;amp;_textureId)); } int getTextureId() {return _textureId; } protected: int _textureId; // The reference ID of the texture in OpenGL memory int _width; int _height; }; Now for the code to actually load the image</description>
    </item>
    <item>
      <title>Setting OpenGL view for iPhone 4 retina hi resolution</title>
      <link>https://djlink.github.io/web_david-amador.com/2010/09/setting-opengl-view-for-iphone-4-retina-hi-resolution/</link>
      <pubDate>Fri, 10 Sep 2010 09:24:23 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2010/09/setting-opengl-view-for-iphone-4-retina-hi-resolution/</guid>
      <description>This had me scratching my head for awhile.
At first I thought that glGetRenderbufferParameterivOES would properly detect Retina screen at 960×640 but it keeps returning 480×320.
A little explanation on Retina screen first. Older devices have 320×480 screen resolution. With new iPhone 4 and iPod Touch 4G the screen has 640×960 but on the same physical area. This means that each pixel is 4 times as small.
To properly simulate older games resolutions iOS will replace each of your 320×480 game pixel by 4, this way your game will look identical.</description>
    </item>
    <item>
      <title>iPhone OpenGL screen orientation using the accelerometer</title>
      <link>https://djlink.github.io/web_david-amador.com/2010/08/iphone-opengl-screen-orientation-using-the-accelerometer/</link>
      <pubDate>Fri, 27 Aug 2010 14:49:39 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2010/08/iphone-opengl-screen-orientation-using-the-accelerometer/</guid>
      <description>Even tough it’s not mandatory to support all screen orientations it’s always nice to support at least 2 of them.
Let’s imagine your game is landscaped, by some reason the user may want to use either with the home button on the left or on the right. Most games support this, if you flip the device, the game will too.
I’ve been using OpenGL to support the device orientation, most people on forums want an automatic solution, but belive me, it’s best that you have control on this.</description>
    </item>
    <item>
      <title>Developers log stardate 26082010</title>
      <link>https://djlink.github.io/web_david-amador.com/2010/08/developers-log-stardate-26082010/</link>
      <pubDate>Thu, 26 Aug 2010 19:05:55 +0000</pubDate>
      <guid>https://djlink.github.io/web_david-amador.com/2010/08/developers-log-stardate-26082010/</guid>
      <description>It’s been awhile since I last updated this, I’ve have my hands full with Vizati iPhone.
Ever since I got an IPod Touch 2G it was easier for Rita to get a sense of the screen size (although we knew to be 320×480) it’s different when you are testing on the real thing, text looks smaller, other stuff looks way too big.
Here’s a picture she took after a few adjustments.</description>
    </item>
  </channel>
</rss>
