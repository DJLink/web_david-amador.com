<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>c&#43;&#43; on David Amador</title>
    <link>https://www.david-amador.com/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on David Amador</description>
    <image>
      <title>David Amador</title>
      <url>https://www.david-amador.com/david-amador-pixel.png</url>
      <link>https://www.david-amador.com/david-amador-pixel.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Apr 2013 11:22:22 +0000</lastBuildDate>
    <atom:link href="https://www.david-amador.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenGL 2D Independent Resolution Rendering</title>
      <link>https://www.david-amador.com/2013/04/opengl-2d-independent-resolution-rendering/</link>
      <pubDate>Mon, 22 Apr 2013 11:22:22 +0000</pubDate>
      <guid>https://www.david-amador.com/2013/04/opengl-2d-independent-resolution-rendering/</guid>
      <description>Around two years ago I made a tutorial for XNA in which you could render 2D games scaled to the current window resolution with proper letter-boxes or pillar-boxes.
As many know since then I moved to C++ and OpenGL, and ocasionally people ask me “Can you still do that independent resolution thing?”, and yes it’s perfectly possible. I’ve used this on all latest Windows, Mac and iOS, in case you are wondering.</description>
      <content:encoded><![CDATA[<p>Around two years ago I made a <a href="/2010/03/xna-2d-independent-resolution-rendering/" title="XNA 2D Independent Resolution Rendering">tutorial for XNA</a> in which you could render 2D games scaled to the current window resolution with proper letter-boxes or pillar-boxes.</p>
<p>As many know since then I moved to C++ and OpenGL, and ocasionally people ask me “Can you still do that independent resolution thing?”, and yes it’s perfectly possible. I’ve used this on all latest Windows, Mac and iOS, in case you are wondering.</p>
<p>The code is quite straight forward actually. In case you are not familiar with what we are trying to achieve here I recommend my other tutorial first, where I explain this is more detail.</p>
<p>So first we need to set our viewport with proper letterbox or pillar box, if required.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Let&#39;s start by clearing the whole screen with black
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glClearColor</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">);</span>	
</span></span><span class="line"><span class="cl"><span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Both these values must be your real window size, so of course these values can&#39;t be static
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">screen_width</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">screen_height</span> <span class="o">=</span> <span class="mi">728</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This is your target virtual resolution for the game, the size you built your game to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">virtual_width</span><span class="o">=</span><span class="mi">1280</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">virtual_height</span><span class="o">=</span><span class="mi">720</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="n">targetAspectRatio</span> <span class="o">=</span> <span class="n">virtual_width</span><span class="o">/</span><span class="n">virtual_height</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c1">// figure out the largest area that fits in this resolution at the desired aspect ratio
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">screen_width</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">width</span> <span class="o">/</span> <span class="n">targetAspectRatio</span> <span class="o">+</span> <span class="mf">0.5f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="o">&gt;</span> <span class="n">screen_height</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="c1">//It doesn&#39;t fit our height, we must switch to pillarbox then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">height</span> <span class="o">=</span> <span class="n">screen_height</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">height</span> <span class="o">*</span> <span class="n">targetAspectRatio</span> <span class="o">+</span> <span class="mf">0.5f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// set up the new viewport centered in the backbuffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">vp_x</span> <span class="o">=</span> <span class="p">(</span><span class="n">screen_width</span>  <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">vp_y</span> <span class="o">=</span> <span class="p">(</span><span class="n">screen_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">height</span><span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="n">glViewport</span><span class="p">(</span><span class="n">vp_x</span><span class="p">,</span><span class="n">vp_y</span><span class="p">,</span><span class="n">width</span><span class="p">,</span><span class="n">height</span><span class="p">);</span>
</span></span></code></pre></div><p>Now that our viewport is set we should set our 2d perspective</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Now we use glOrtho
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_PROJECTION</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glPushMatrix</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">glLoadIdentity</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// This function is for Mac and Windows only, if you are using
</span></span></span><span class="line"><span class="cl"><span class="c1">// iOS you should use glOrthof instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glOrtho</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">screen_width</span><span class="p">,</span> <span class="n">screen_height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*if on iOS*/</span> <span class="c1">//glOrthof(0, screen_width, screen_height, 0, -1, 1);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_MODELVIEW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glPushMatrix</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">glLoadIdentity</span><span class="p">();</span>
</span></span></code></pre></div><p>So now we should push the transformations before actually drawing anything</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Push in scale transformations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_MODELVIEW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glPushMatrix</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Now to calculate the scale considering the screen size and virtual size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">float</span> <span class="n">scale_x</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)((</span><span class="kt">float</span><span class="p">)(</span><span class="n">screen_width</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">virtual_width</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="n">scale_y</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)((</span><span class="kt">float</span><span class="p">)(</span><span class="n">screen_height</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">virtual_height</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glScalef</span><span class="p">(</span><span class="n">scale_x</span><span class="p">,</span> <span class="n">scale_y</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">);</span>		
</span></span></code></pre></div><p>We can now proceed to drawing everything we want, that’s is really up to you now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Place your sprites drawing code here
</span></span></span><span class="line"><span class="cl"><span class="c1">// Example
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glColor3f</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glVertex3f</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glVertex3f</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glVertex3f</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glEnd</span><span class="p">();</span>
</span></span></code></pre></div><p>I really don’t recommend using glBegin() and glEnd(), this was just for simplicity, you should use glDrawElements or glDrawArrays</p>
<p>After you finish you drawing code we can proceed to the rest</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This pops those matrices for the scale transformations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_MODELVIEW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glLoadIdentity</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">glPopMatrix</span><span class="p">();</span>		
</span></span></code></pre></div><p>//Now to finish we should end our 2D perspective</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_PROJECTION</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glPopMatrix</span><span class="p">();</span>   
</span></span><span class="line"><span class="cl"><span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_MODELVIEW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">glPopMatrix</span><span class="p">();</span>	
</span></span></code></pre></div><p>And that’s pretty much it. I have this code on my games and it works fine, at least for what I usually need. Feel free to tweak it around for your needs. Hope this helps to get a picture on how to achieve this effect. Let me know if you find any bug.</p>
<p>Here’s an example of what you might achieve with this</p>
<p><a href="/wp-content/uploads/2010/03/Base_1280x720_Res_1280x800.jpg"><img loading="lazy" src="/wp-content/uploads/2010/03/Base_1280x720_Res_1280x800-300x193.jpg" alt="Base_1280x720_Res_1280x800"  />
</a><a href="/wp-content/uploads/2010/03/Base_1280x720_Res_800x600.jpg"><img loading="lazy" src="/wp-content/uploads/2010/03/Base_1280x720_Res_800x600-300x234.jpg" alt="Base_1280x720_Res_800x600"  />
</a><a href="/wp-content/uploads/2010/03/Base_1024x768_Res_800x600.jpg"><img loading="lazy" src="/wp-content/uploads/2010/03/Base_1024x768_Res_800x600-300x234.jpg" alt="Base_1024x768_Res_800x600"  />
</a><a href="/wp-content/uploads/2010/03/Base_1280x720_Res_480x640.jpg"><img loading="lazy" src="/wp-content/uploads/2010/03/Base_1280x720_Res_480x640-219x300.jpg" alt="Base_1280x720_Res_480x640"  />
</a><a href="/wp-content/uploads/2010/03/Base_1024x768_Res_1280x720.jpg"><img loading="lazy" src="/wp-content/uploads/2010/03/Base_1024x768_Res_1280x720-300x175.jpg" alt="Base_1024x768_Res_1280x720"  />
</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Detecting C&#43;&#43; memory leaks in Visual Studio - again</title>
      <link>https://www.david-amador.com/2012/06/detecting-c-memory-leaks-in-visual-studio-again/</link>
      <pubDate>Sun, 03 Jun 2012 20:00:01 +0000</pubDate>
      <guid>https://www.david-amador.com/2012/06/detecting-c-memory-leaks-in-visual-studio-again/</guid>
      <description>I made a small post about detecting C++ memory leaks in Visual Studio in 2010. At the time that seemed to suffice, but some months ago someone told me about Visual Leak Detector and boy does it work.
According to the website itself
Visual Leak Detector is a free, robust, open-source memory leak detection system for Visual C++.
It’s pretty easy to use. After installing it, you just need to tell Visual C++ where to find the included header and library file.</description>
      <content:encoded><![CDATA[<p>I made a small post about detecting C++ <a href="/2010/10/tracking-memory-leaks-in-visual-studio/" title="Tracking memory leaks in Visual Studio">memory leaks in Visual Studio</a> in 2010. At the time that seemed to suffice, but some months ago someone told me about <a href="http://vld.codeplex.com/">Visual Leak Detector</a> and boy does it work.</p>
<p>According to the website itself</p>
<blockquote>
<p>Visual Leak Detector is a free, robust, open-source memory leak detection system for Visual C++.</p>
<p>It’s pretty easy to use. After installing it, you just need to tell Visual C++ where to find the included header and library file.</p>
<p>Then it can be used with any C/C++ project simply by adding the following line to your code:</p>
<pre tabindex="0"><code>&lt;pre lang=&#34;cpp&#34;&gt;#include &#34;vld.h&#34;
</code></pre></blockquote>
<p>It’s very easy to use and I tracked down a bunch of memory leaks hidden inside my code since the time I released Vizati.</p>
<p>As expected this is a heavy beast and debbuding while using VLD required much more memory, but totally worth it. You can even output to a file</p>
<p><a href="/wp-content/uploads/2012/06/vld.png"><img loading="lazy" src="/wp-content/uploads/2012/06/vld.png" alt=""  title="vld"  />
</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Xbox 360 Controller Input in C&#43;&#43; via XInput</title>
      <link>https://www.david-amador.com/2012/04/xbox-360-controller-input-in-c-via-xinput/</link>
      <pubDate>Sun, 15 Apr 2012 11:41:27 +0000</pubDate>
      <guid>https://www.david-amador.com/2012/04/xbox-360-controller-input-in-c-via-xinput/</guid>
      <description>So you have that Xbox360 controller laying around and want to connect it to your game?
On XNA this is an out of the box option but if you’re using C++ you have a bit more work to do first.
First of all, you will need the DirecX 9.0+ sdk.
The includes.
#define WIN32_LEAN_AND_MEAN // We don&amp;#39;t want the extra stuff like MFC and such #include &amp;lt;windows&amp;gt; #include &amp;lt;XInput.h&amp;gt; // XInput API #pragma comment(lib, &amp;#34;XInput.</description>
      <content:encoded><![CDATA[<p>So you have that Xbox360 controller laying around and want to connect it to your game?</p>
<p>On XNA this is an out of the box option but if you’re using C++ you have a bit more work to do first.</p>
<p>First of all, you will need the DirecX 9.0+ sdk.</p>
<p>The includes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define WIN32_LEAN_AND_MEAN </span><span class="c1">// We don&#39;t want the extra stuff like MFC and such
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;windows&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;XInput.h&gt;</span><span class="cp">     </span><span class="c1">// XInput API
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#pragma comment(lib, &#34;XInput.lib&#34;)   </span><span class="c1">// Library. If your compiler doesn&#39;t support this type of lib include change to the corresponding one
</span></span></span></code></pre></div><p>Let’s define the buttons</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">enum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_DPAD_UP</span>          <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_DPAD_DOWN</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_DPAD_LEFT</span>        <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_DPAD_RIGHT</span>       <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_START</span>            <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_BACK</span>             <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_LEFT_THUMB</span>       <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_RIGHT_THUMB</span>      <span class="o">=</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_LEFT_SHOULDER</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_RIGHT_SHOULDER</span>   <span class="o">=</span> <span class="mi">9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_A</span>                <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_B</span>                <span class="o">=</span> <span class="mi">11</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_X</span>                <span class="o">=</span> <span class="mi">12</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePad_Button_Y</span>                <span class="o">=</span> <span class="mi">13</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePadButton_Max</span> <span class="o">=</span>             <span class="mi">14</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">GamePadButton</span><span class="p">;</span>
</span></span></code></pre></div><p><img loading="lazy" src="/wp-content/uploads/2012/04/450px-360_controller.svg_.jpg" alt=""  title="450px-360_controller.svg"  />
</p>
<p>After some digging I don’t think Microsoft exposes access to the Guide button, let me know if you find anything. Anyway it’s not something we need on Windows.</p>
<p>Now the GamePadIndexes</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GamePad Indexes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">enum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePadIndex_One</span> <span class="o">=</span>  <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePadIndex_Two</span> <span class="o">=</span>  <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePadIndex_Three</span> <span class="o">=</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">GamePadIndex_Four</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">GamePadIndex</span><span class="p">;</span>
</span></span></code></pre></div><p>The GamePadIndex is to define the player position. Like on the Xbox360, this way we can control up to 4 controllers.</p>
<p>We need something to store the GamePad state</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// The GamePad State Stuct, were we store the buttons positions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">GamePadState</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">bool</span>		<span class="n">_buttons</span><span class="p">[</span><span class="n">GamePadButton_Max</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">Vector2</span> 	<span class="n">_left_thumbstick</span><span class="p">;</span>               <span class="c1">// &lt;= I&#39;m using a Vector2 (floats) class but you can replaced it with a float X and Y or whatever your Vector2 class is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">Vector2</span>	        <span class="n">_right_thumbstick</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">float</span>		<span class="n">_left_trigger</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">float</span>		<span class="n">_right_trigger</span><span class="p">;</span>	
</span></span><span class="line"><span class="cl">	<span class="c1">// Just to clear all values to default
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">void</span> <span class="nf">reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">GamePadButton_Max</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">_buttons</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">_left_thumbstick</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">_right_thumbstick</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">_left_trigger</span> <span class="o">=</span> <span class="n">_right_trigger</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">	
</span></span></code></pre></div><p>Now a small class</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GamePadXbox</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">	<span class="n">GamePadXbox</span><span class="p">(</span><span class="n">GamePadIndex</span> <span class="n">player</span><span class="p">)</span>			
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="n">_playerIndex</span> <span class="o">=</span> <span class="n">player</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                  <span class="n">State</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">virtual</span> <span class="o">~</span><span class="n">GamePadXbox</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// We don&#39;t want the controller to be vibrating accidentally when we exit the app
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span><span class="p">(</span><span class="n">is_connected</span><span class="p">())</span> <span class="n">vibrate</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span><span class="mf">0.0f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kt">bool</span> <span class="nf">is_connected</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="nf">vibrate</span><span class="p">(</span><span class="kt">float</span> <span class="n">leftmotor</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="kt">float</span> <span class="n">rightmotor</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">update</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">GamePadState</span>	<span class="n">State</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">XINPUT_STATE</span> <span class="n">_controllerState</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">GamePadIndex</span> <span class="n">_playerIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Now, onto the GamePadXbox::is_connected()</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">is_connected</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="c1">// clean the state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_controllerState</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">XINPUT_STATE</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="c1">// Get the state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="n">DWORD</span> <span class="n">Result</span> <span class="o">=</span> <span class="n">XInputGetState</span><span class="p">(</span><span class="n">_controllerNum</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_controllerState</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="k">if</span><span class="p">(</span><span class="n">Result</span> <span class="o">==</span> <span class="n">ERROR_SUCCESS</span><span class="p">)</span>	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">else</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Documentation for the XInputGetState is <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.reference.xinputgetstate%28v=vs.85%29.aspx">here</a>.</p>
<p>Onto the vibrate function. Now, the Vibration accepts values between 0 and 65535. But we don&rsquo;t want to be typing that every time so the vibrate accepts from a range of 0.0f (0) to 1.0f (65535);</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">vibrate</span><span class="p">(</span><span class="kt">float</span> <span class="n">leftmotor</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="kt">float</span> <span class="n">rightmotor</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Create a new Vibraton 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">XINPUT_VIBRATION</span> <span class="n">Vibration</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Vibration</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">XINPUT_VIBRATION</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">leftVib</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">leftmotor</span><span class="o">*</span><span class="mf">65535.0f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">rightVib</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">rightmotor</span><span class="o">*</span><span class="mf">65535.0f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Vibration Values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">Vibration</span><span class="p">.</span><span class="n">wLeftMotorSpeed</span> <span class="o">=</span> <span class="n">leftVib</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Vibration</span><span class="p">.</span><span class="n">wRightMotorSpeed</span> <span class="o">=</span> <span class="n">rightVib</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Vibrate the controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">XInputSetState</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">_controllerNum</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Vibration</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>On the destructor I&rsquo;ve placed the vibrate at 0.0f otherwise the controller may be left vibrating after your game exits until the user unplugs it.</p>
<p>Finally, the update() function. Now this one is more out of convenience, since you could get the state straight out of  XINPUT_STATE but I think this is a more consistent way of doing it. You can decide how you want on yours.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">update</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">State</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// The values of the Left and Right Triggers go from 0 to 255. We just convert them to 0.0f=&gt;1.0f
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">bRightTrigger</span> <span class="o">&amp;&amp;</span> <span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">bRightTrigger</span> <span class="o">&lt;</span> <span class="n">XINPUT_GAMEPAD_TRIGGER_THRESHOLD</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">State</span><span class="p">.</span><span class="n">_right_trigger</span> <span class="o">=</span> <span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">bRightTrigger</span><span class="o">/</span><span class="mf">255.0f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">bLeftTrigger</span> <span class="o">&amp;&amp;</span> <span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">bLeftTrigger</span> <span class="o">&lt;</span> <span class="n">XINPUT_GAMEPAD_TRIGGER_THRESHOLD</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">State</span><span class="p">.</span><span class="n">_left_trigger</span> <span class="o">=</span> <span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">bLeftTrigger</span><span class="o">/</span><span class="mf">255.0f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">       <span class="c1">// Get the Buttons
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">wButtons</span> <span class="o">&amp;</span> <span class="n">XINPUT_GAMEPAD_A</span><span class="p">)</span> <span class="n">State</span><span class="p">.</span><span class="n">_buttons</span><span class="p">[</span><span class="n">GamePad_Button_A</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">wButtons</span> <span class="o">&amp;</span> <span class="n">XINPUT_GAMEPAD_B</span><span class="p">)</span> <span class="n">State</span><span class="p">.</span><span class="n">_buttons</span><span class="p">[</span><span class="n">GamePad_Button_B</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">wButtons</span> <span class="o">&amp;</span> <span class="n">XINPUT_GAMEPAD_X</span><span class="p">)</span> <span class="n">State</span><span class="p">.</span><span class="n">_buttons</span><span class="p">[</span><span class="n">GamePad_Button_X</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">wButtons</span> <span class="o">&amp;</span> <span class="n">XINPUT_GAMEPAD_Y</span><span class="p">)</span> <span class="n">State</span><span class="p">.</span><span class="n">_buttons</span><span class="p">[</span><span class="n">GamePad_Button_Y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">wButtons</span> <span class="o">&amp;</span> <span class="n">XINPUT_GAMEPAD_DPAD_DOWN</span><span class="p">)</span> <span class="n">State</span><span class="p">.</span><span class="n">_buttons</span><span class="p">[</span><span class="n">GamePad_Button_DPAD_DOWN</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// The Rest is missing, you can figure out the rest :)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="p">....</span>
</span></span><span class="line"><span class="cl">             <span class="p">(</span><span class="n">ThumbSticks</span> <span class="n">code</span> <span class="n">below</span><span class="p">)</span>   
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>For getting all buttons here are the official flags according to msdn</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_DPAD_UP</span>          <span class="mh">0x00000001</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_DPAD_DOWN</span>        <span class="mh">0x00000002</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_DPAD_LEFT</span>        <span class="mh">0x00000004</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_DPAD_RIGHT</span>       <span class="mh">0x00000008</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_START</span>            <span class="mh">0x00000010</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_BACK</span>             <span class="mh">0x00000020</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_LEFT_THUMB</span>       <span class="mh">0x00000040</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_RIGHT_THUMB</span>      <span class="mh">0x00000080</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_LEFT_SHOULDER</span>    <span class="mh">0x0100</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_RIGHT_SHOULDER</span>   <span class="mh">0x0200</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_A</span>                <span class="mh">0x1000</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_B</span>                <span class="mh">0x2000</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_X</span>                <span class="mh">0x4000</span>
</span></span><span class="line"><span class="cl"><span class="n">XINPUT_GAMEPAD_Y</span>                <span class="mh">0x8000</span>
</span></span></code></pre></div><p>The ThumbSticks are a bit more tricky. They return 2 axis each but you have to make sure they are not in the deadzone. The deadzone pretty much are values !=0 but that are not relevant and can lead to errors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Check to make sure we are not moving during the dead zone
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// Let&#39;s check the Left DeadZone
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">sThumbLX</span>  <span class="o">-</span><span class="n">XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">	<span class="p">(</span><span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">sThumbLY</span>  <span class="o">-</span><span class="n">XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>    
</span></span><span class="line"><span class="cl">	<span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">sThumbLX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">sThumbLY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Check left thumbStick
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="kt">float</span> <span class="n">leftThumbY</span> <span class="o">=</span> <span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">sThumbLY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">leftThumbY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">State</span><span class="p">.</span><span class="n">_left_thumbstick</span><span class="p">.</span><span class="n">Y</span> <span class="o">=</span> <span class="n">leftThumbY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">float</span> <span class="n">leftThumbX</span> <span class="o">=</span> <span class="n">_controllerState</span><span class="p">.</span><span class="n">Gamepad</span><span class="p">.</span><span class="n">sThumbLX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">leftThumbX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">State</span><span class="p">.</span><span class="n">_left_thumbstick</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">leftThumbX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>    
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">  <span class="c1">// For the rightThumbstick it&#39;s pretty much the same.
</span></span></span></code></pre></div><p>So how would we use this then?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">GamePadXbox</span><span class="o">*</span> <span class="n">pad</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GamePadXbox</span><span class="p">(</span><span class="n">GamePadIndex_One</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">     <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">if</span><span class="p">(</span><span class="n">pad</span><span class="o">-&gt;</span><span class="n">is_connected</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">       <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">pad</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">          <span class="k">if</span><span class="p">(</span><span class="n">pad</span><span class="o">-&gt;</span><span class="n">State</span><span class="p">.</span><span class="n">_buttons</span><span class="p">[</span><span class="n">GamePad_Button_BACK</span><span class="p">]</span><span class="o">==</span><span class="nb">true</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>   
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">delete</span> <span class="n">pad</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Anyway, most of this code is not elegant or &ldquo;pretty&rdquo; but it should work, the idea is for you to understand the concept, the rest is up to you.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Cross-Platform engine progress</title>
      <link>https://www.david-amador.com/2010/10/cross-platform-engine-progress/</link>
      <pubDate>Mon, 11 Oct 2010 14:20:02 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/10/cross-platform-engine-progress/</guid>
      <description>If you read my recent posts you know I’ve been bringing Basalt to C++.
The plan is to support both DirectX and OpenGL render API’s and OpenGLES for iOS devices. I’m tired of porting stuff so I want to make a better framework for future projects and I’ll leave the XNA branch for Xbox360 and Windows Phone 7. I really wished I had this before.
Since the iPhone branch is stable I move on to making it compatible with Win32 and MacOSX.</description>
      <content:encoded><![CDATA[<p>If you read my recent posts you know I’ve been bringing Basalt to C++.<br>
The plan is to support both DirectX and OpenGL render API’s and OpenGLES for iOS devices. I’m tired of porting stuff so I want to make a better framework for future projects and I’ll leave the XNA branch for Xbox360 and Windows Phone 7. I really wished I had this before.</p>
<p>Since the iPhone branch is stable I move on to making it compatible with Win32 and MacOSX.</p>
<p>This past week I added OpenGL support, not very different from OpenGLES but I still don’t have any shader support, just basic stuff is working now. After that Vizati iPhone code worked like a charm on Windows, as intended the game itself didn’t depend on platform specifics and it’s abstracted from all that, which was one of the major mistakes I did when starting the framework back in February.</p>
<p><img loading="lazy" src="/wp-content/uploads/2010/10/vizati_iphone_win32.png" alt=""  title="vizati_iphone_win32"  />
</p>
<p>Sound is working too, using <a href="http://www.vorbis.com/">Vorbis OGG</a> which is cross-platform and open-source.</p>
<p>I still have a lot of work to do but It’s on good track, I’ll leave DirectX 9 support for the end, I want to get everything else in place first.</p>
<p>A little curiosity, between Vizati (.Net + XNA) and Vizati (Basalt C++/OpenGL), with the same assets, well on XNA it’s MP3 and C++ is OGG, I’m getting very different memory usage.<br>
Around 165MB on XNA and around 20MB on C++/OpenGL. I’m probably doing something wrong on .Net side but since the difference is so big I can’t really understand what.</p>
<p>Even if I use uncompressed music the memory only jumps to 70MB, still a long stretch to 165MB.</p>
<p><img loading="lazy" src="/wp-content/uploads/2010/10/basalt_xna_vs_basalt_cpp.png" alt=""  title="basalt_xna_vs_basalt_cpp"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Developers log stardate 26082010</title>
      <link>https://www.david-amador.com/2010/08/developers-log-stardate-26082010/</link>
      <pubDate>Thu, 26 Aug 2010 19:05:55 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/08/developers-log-stardate-26082010/</guid>
      <description>It’s been awhile since I last updated this, I’ve have my hands full with Vizati iPhone.
Ever since I got an IPod Touch 2G it was easier for Rita to get a sense of the screen size (although we knew to be 320×480) it’s different when you are testing on the real thing, text looks smaller, other stuff looks way too big.
Here’s a picture she took after a few adjustments.</description>
      <content:encoded><![CDATA[<p>It’s been awhile since I last updated this, I’ve have my hands full with Vizati iPhone.</p>
<p>Ever since I got an IPod Touch 2G it was easier for Rita to get a sense of the screen size (although we knew to be 320×480) it’s different when you are testing on the real thing, text looks smaller, other stuff looks way too big.</p>
<p>Here’s a picture she took after a few adjustments.</p>
<p><a href="http://www.indiedb.com/games/vizati/images/vizati-iphone" title="Vizati iPhone - Indie DB"><img loading="lazy" src="http://media.indiedb.com/cache/images/games/1/13/12804/thumb_620x2000/vizati_iphone.jpg" alt="Vizati iPhone"  />
</a></p>
<p><strong>Initial testing</strong></p>
<p>First thing I notice when testing on the device were slowdowns when the cube is fading, it had a lot of particles filling the screen and the framerate dropped down, although this only happens when each level loads and doesn’t interfere with gameplay itself I got a little frustrated.<br>
On the simulator It slowed down a little but only on Debug and even more OpenGL on the emulator is by software.<br>
Another issue was the sound, I’m using OpenAL + a custom OGG parser, and sound was also slow, with hiccups.</p>
<p><strong>Sound</strong><br>
For the sound it turned out a little easier than I expected, there as nothing wrong with the parser, what would happen is that if the CPU would sometimes take longer than expected on someplace and the player would run out of data making those hiccups, since it was constantly running out of data and getting more.<br>
I increased the buffers size and numbers, so now I have 5 buffers with 65536 bytes each. Every time a buffer is parsed I read another one and queue it.<br>
Solved the problem immediately. Yesterday while playing the game (after 10-20m) the sound started having hiccups again, although the game was fine, so I may still have some flaw in there, must research it more.</p>
<p>Here’s a video where of me playing with some particles:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/ch3QvoBd1_c" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><strong>Primitives</strong><br>
I can get much more particles on screen now because my first attempt to draw primitives in OpenGLES was drawing Quads with an mapped texture. When I got that working I would just send vertex points and texture coordinates and iterate all objects I wanted to draw.<br>
WROONGGGGGGG…..<br>
Although this works you should always batch as much geometry (within limits of course) as you can to make it on as fewer draw calls as you can. On both OpenGL and DirectX draw calls are the slowest part.<br>
It’s faster to draw 1000 triangles in one call than on 1 triangle per call. You get the point.<br>
So I started by making a PrimitiveBatch, sort of what XNA has, I just pass along vertex points, texture coordinates, color refs etc.<br>
Since it’s 2D I try to group by texture and by Z. All primitives with same texture on the same Z position can be drawn at once. You can’t draw all with same texture regardless of the Z some elements may be occluded when it was not intended, basically because it will keep drawing on top of what you have, at least for the current Buffer.</p>
<p>After this I got enough drawing boost to have the same amount of particles that the PC version, which is cool.</p>
<p><strong>Some tips</strong><br>
Although I’m still kind of new at this all iPhone things I can give you a few tips, they work for everything but are particular handy on devices with lower CPU power.</p>
<ul>
<li>Avoid using std::list:end(), on big lists it carries an extra burden.</li>
</ul>
<p>If you don’t intend to add/remove anything from the list during the cycle just save that at first</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">   <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">::</span><span class="n">iterator</span> <span class="n">b</span> <span class="o">=</span> <span class="n">_mylist</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">::</span><span class="n">iterator</span> <span class="n">e</span> <span class="o">=</span> <span class="n">_mylist</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span><span class="p">(</span><span class="n">b</span><span class="o">!=</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">/// Do stuff
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">++</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><ul>
<li>Avoid deleting stuff on loops. One example, I have a list where I stack stuff to be drawn on my PrimitiveBatch, typically when you start drawing you add everything, the lists keeps growing, you draw and then delete, and you go back to “start drawing” again. You can optimize this by never deleting and only creating on a need basis. Belize me it makes huge difference, and besides you will need to create that again so might as well not delete it and when starting over just update values. Small things like this may not be an issue on PC but on small devices every cycle counts.</li>
</ul>
<p>Most of this stuff you may already know but there are many who don’t. I’ll try to update this more often.</p>
<p>So now I’ll get back to my testing to see if we get to testing and later to the app store asap =)</p>
<p>PS: I need iPhone/IPod Touch testers, drop me an email with your UDID if you are interested…</p>
]]></content:encoded>
    </item>
    <item>
      <title>Instance based Callbacks in C&#43;&#43;</title>
      <link>https://www.david-amador.com/2010/07/instance-based-callbacks-in-cpp/</link>
      <pubDate>Wed, 14 Jul 2010 15:18:21 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/07/instance-based-callbacks-in-cpp/</guid>
      <description>One of the things that was probably forgotten but the dudes who made C++ standard were callbacks, there’s no out of the box solution for Instance based Callbacks, just for functions.
When I moved to C# I was really happy with the way delegates work, it’s simple, easy and most of all, it works.
On game development one of the things callbacks are usually used is for Buttons, you have a menu and want to attribute a function to each button.</description>
      <content:encoded><![CDATA[<p>One of the things that was probably forgotten but the dudes who made C++ standard were callbacks, there’s no out of the box solution for Instance based Callbacks, just for functions.<br>
When I moved to C# I was really happy with the way delegates work, it’s simple, easy and most of all, it works.</p>
<p>On game development one of the things callbacks are usually used is for Buttons, you have a menu and want to attribute a function to each button. Sure you can point it to the same one and make a bunch of if’s and then point to a Global var which does the correct action, but this is not elegant and sure as hell not easy to add/modify stuff.</p>
<p>I came across a couple of solutions for having an instance based callback:<br>
1- Do your own – I’ve made one that worked but couldn’t get around to add parameters. I think we might skip this one since you are probably looking for a quick solution.<br>
2 – Use <a href="http://www.boost.org/">boost</a> – If you don’t know this have a look, even for other stuff, Boost has tons of awesome apis for helping C++ development. Including smart pointers that basically delete themselves automatically.<br>
3 – Use <a href="http://codeplea.com/pluscallback/">PlusCallback</a> – I decided to use this one.</p>
<p><a href="/wp-content/uploads/2010/07/cpp_callback_benchmark.png"><img loading="lazy" src="/wp-content/uploads/2010/07/cpp_callback_benchmark.png" alt=""  title="cpp_callback_benchmark"  />
</a></p>
<p>And it’s simple to use</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// Callback without parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="c1">// My example class
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Sprite</span><span class="o">*</span> <span class="n">sprite</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sprite</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">cb</span><span class="o">::</span><span class="n">Callback0</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">call1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Bind callback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">call1</span><span class="p">.</span><span class="n">Reset</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Sprite</span><span class="o">::</span><span class="n">SomeFunction</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// Call callback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">call1</span><span class="p">();.</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// Example with parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">cb</span><span class="o">::</span><span class="n">Callback1</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">,</span> <span class="n">Sprite</span><span class="o">*&gt;</span> <span class="n">call2</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// Bind callback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">call2</span><span class="p">.</span><span class="n">Reset</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Sprite</span><span class="o">::</span><span class="n">SomeFunctionWithParameterSprite</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// Your function should be something like 
</span></span></span><span class="line"><span class="cl"><span class="c1">// Sprite::SomeFunctionWithParameterSprite(Sprite* sprite);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">call2</span><span class="p">(</span><span class="n">sprite</span><span class="p">);</span>
</span></span></code></pre></div><p>Easy right? It even work with return, just switch that void to something else. Let me know if you find a better solution. For now I’m sticking with this one.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to do a Xna Log file</title>
      <link>https://www.david-amador.com/2009/11/how-to-do-a-xna-log-file/</link>
      <pubDate>Fri, 20 Nov 2009 10:53:13 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/11/how-to-do-a-xna-log-file/</guid>
      <description>Although the title says XNA log file this is actually a C# log file, I’ve just thrown this title cause lot’s of people search for xna log instead of C# log file.
Many have asked me why take time to do a log file when you can throw exceptions when something goes wrong. Well the answer is simple, to keep track of what’s happening, log steps, write to the file exactly what when wrong even if you are on Release mode, and more, if someone complains the game is crashing you simply ask for the log file and see what when wrong.</description>
      <content:encoded><![CDATA[<p>Although the title says XNA log file this is actually a C# log file, I’ve just thrown this title cause lot’s of people search for xna log instead of C# log file.</p>
<p>Many have asked me why take time to do a log file when you can throw exceptions when something goes wrong. Well the answer is simple, to keep track of what’s happening, log steps, write to the file exactly what when wrong even if you are on Release mode, and more, if someone complains the game is crashing you simply ask for the log file and see what when wrong.</p>
<p>I’ve recently build one for my engine Basalt so I decided to share the result, start by creating log type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Log_Type</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ERROR</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">WARNING</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">INFO</span> <span class="p">=</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>Next, the class itself:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"> <span class="kd">public</span> <span class="kd">static</span> <span class="k">class</span> <span class="nc">Logger</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">static</span> <span class="kd">protected</span> <span class="kt">bool</span>              <span class="n">_active</span><span class="p">;</span>  <span class="c1">// In case you want to deactivate the logger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">static</span> <span class="kd">public</span> <span class="k">init</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">_active</span> <span class="p">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#if</span> <span class="n">WINDOWS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">StreamWriter</span> <span class="n">textOut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="s">&#34;log.html&#34;</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Create</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">Write</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="n">textOut</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;Log File&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">textOut</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">textOut</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;&lt;span style=&#34;</span><span class="n">font</span><span class="p">-</span><span class="n">family</span><span class="p">:</span> <span class="s">&#34;Kootenay&#34;</span><span class="p">;</span> <span class="n">color</span><span class="p">:</span> <span class="err">#</span><span class="m">000000</span><span class="p">;</span><span class="s">&#34;&gt;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">textOut</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;Log started at &#34;</span> <span class="p">+</span> <span class="n">System</span><span class="p">.</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToLongTimeString</span><span class="p">()+</span><span class="s">&#34;&lt;/span&gt;
</span></span></span><span class="line"><span class="cl"><span class="s"></span><span class="p">&lt;</span><span class="n">hr</span><span class="p">&gt;&lt;/</span><span class="n">hr</span><span class="p">&gt;</span><span class="s">&#34;);
</span></span></span><span class="line"><span class="cl"><span class="s"></span>            <span class="n">textOut</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">static</span> <span class="kd">public</span> <span class="kt">bool</span> <span class="n">Active</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_active</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">set</span> <span class="p">{</span> <span class="n">_active</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">static</span> <span class="kd">public</span> <span class="k">void</span> <span class="n">log</span><span class="p">(</span><span class="n">Log_Type</span> <span class="n">type</span><span class="p">,</span> <span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#if</span> <span class="n">WINDOWS</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="n">_active</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">string</span> <span class="n">begin</span> <span class="p">=</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">switch</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="n">Log_Type</span><span class="p">.</span><span class="n">ERROR</span><span class="p">:</span> <span class="n">begin</span> <span class="p">=</span> <span class="s">&#34;&lt;span style=&#34;</span><span class="n">color</span><span class="p">:</span> <span class="err">#</span><span class="m">00f000</span><span class="p">;</span><span class="s">&#34;&gt;&#34;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="n">Log_Type</span><span class="p">.</span><span class="n">INFO</span><span class="p">:</span> <span class="n">begin</span> <span class="p">=</span> <span class="s">&#34;&lt;span style=&#34;</span><span class="n">color</span><span class="p">:</span> <span class="err">#</span><span class="m">0008f0</span><span class="p">;</span><span class="s">&#34;&gt;&#34;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="n">Log_Type</span><span class="p">.</span><span class="n">WARNING</span><span class="p">:</span> <span class="n">begin</span> <span class="p">=</span> <span class="s">&#34;&lt;span style=&#34;</span><span class="n">color</span><span class="p">:</span> <span class="err">#</span><span class="m">00f</span><span class="n">f00</span><span class="p">;</span><span class="s">&#34;&gt;&#34;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">text</span> <span class="p">=</span> <span class="n">begin</span><span class="p">+</span><span class="n">System</span><span class="p">.</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToLongTimeString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&#34; : &#34;</span> <span class="p">+</span> <span class="n">text</span> <span class="p">+</span> <span class="s">&#34;&lt;/span&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">Output</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">static</span> <span class="kd">private</span> <span class="k">void</span> <span class="n">Output</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#if</span> <span class="n">WINDOWS</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">StreamWriter</span> <span class="n">textOut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="s">&#34;log.html&#34;</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Append</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">Write</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                <span class="n">textOut</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">textOut</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">catch</span> <span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">string</span> <span class="n">error</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Message</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	
</span></span></code></pre></div><p>For using just do on your game constructor:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">Logger</span><span class="p">.</span><span class="k">init</span><span class="p">();</span>
</span></span></code></pre></div><p>After this since it’s a static class you can do wherever you want a log, something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">Logger</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">Log_Type</span><span class="p">.</span><span class="n">INFO</span><span class="p">,</span><span class="s">&#34;Resolution Changed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Logger</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">Log_Type</span><span class="p">.</span><span class="n">ERROR</span><span class="p">,</span><span class="s">&#34;Unable to find texture XPTO&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p>This will output a log.html file that you can open with your favorite browser.</p>
<p><a href="/wp-content/uploads/2009/11/basalt_log.jpg"><img loading="lazy" src="/wp-content/uploads/2009/11/basalt_log-300x189.jpg" alt="basalt_log"  title="basalt_log"  />
</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Building an 2D Game Engine in XNA - Part 1</title>
      <link>https://www.david-amador.com/2009/10/building-an-2d-game-engine-in-xna-part-1/</link>
      <pubDate>Fri, 16 Oct 2009 18:10:09 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/10/building-an-2d-game-engine-in-xna-part-1/</guid>
      <description>I decided to starting writing a series of tutorials for building an 2d XNA game engine.
Keep in mind that while the main focus is 2d nothing prevents us from adding the 3d stuff later but for now we will stick to 2D.
It’s not very original but I’ll call this the Bay Engine. If anyone else has a better idea let me know.
Requirements:
You must have some Object Oriented Programming background to full understand what we will do here.</description>
      <content:encoded><![CDATA[<p>I decided to starting writing a series of tutorials for building an 2d XNA game engine.</p>
<p>Keep in mind that while the main focus is 2d nothing prevents us from adding the 3d stuff later but for now we will stick to 2D.</p>
<p>It’s not very original but I’ll call this the Bay Engine. If anyone else has a better idea let me know.</p>
<p>Requirements:</p>
<ul>
<li>You must have some <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">Object Oriented Programming</a> background to full understand what we will do here.</li>
<li><a href="http://creators.xna.com/">XNA 3.1</a></li>
<li><a href="http://www.microsoft.com/express/">Visual C# Express or Professional 2008</a></li>
</ul>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Nnu_9qk6Jfs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>This is it for the first part. It just covers the basic structure, next week I’ll talk about objects2d, scene and screens management.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Cloning Objects in C#</title>
      <link>https://www.david-amador.com/2009/10/cloning-objects-in-c-sharp/</link>
      <pubDate>Mon, 12 Oct 2009 20:21:49 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/10/cloning-objects-in-c-sharp/</guid>
      <description>After trying to manually clone some classes, but making a sort of copy constructor I was always ending up with lot’s of code and worse, if I add another variable to my class I would sometimes forgot to also clone it. Luckily and after a search I discovered that C# has a cool thing, Reflection. So you can do something like this:
using System.Reflection; class MyClass { public int a; public float x; MyClass() { // default constructor } MyClass (MyClass my) { FieldInfo[] fields = typeof(MyClass).</description>
      <content:encoded><![CDATA[<p>After trying to manually clone some classes, but making a sort of copy constructor I was always ending up with lot’s of code and worse, if I add another variable to my class I would sometimes forgot to also clone it. Luckily and after a search I discovered that C# has a cool thing, Reflection. So you can do something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="kd">public</span> <span class="kt">float</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">MyClass</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// default constructor</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">MyClass</span> <span class="p">(</span><span class="n">MyClass</span> <span class="n">my</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">FieldInfo</span><span class="p">[]</span> <span class="n">fields</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MyClass</span><span class="p">).</span><span class="n">GetFields</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span>
</span></span><span class="line"><span class="cl">   <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">foreach</span><span class="p">(</span><span class="n">FieldInfo</span> <span class="n">f</span> <span class="k">in</span> <span class="n">fields</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">f</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">f</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">oth</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">MyClass</span> <span class="n">obj1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">obj1</span><span class="p">.</span><span class="n">a</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">obj1</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="m">2.0f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">MyClass</span> <span class="n">obj2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">(</span><span class="n">obj1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// Obj2 will have same values as obj1 and you </span>
</span></span><span class="line"><span class="cl"><span class="c1">// can now use them independently.</span>
</span></span></code></pre></div><p>I hope this is helpful. Let me know if you know a better way</p>
]]></content:encoded>
    </item>
    <item>
      <title>The amazing lands of C&#43;&#43;</title>
      <link>https://www.david-amador.com/2009/10/the-amazing-lands-of-cpp/</link>
      <pubDate>Mon, 05 Oct 2009 16:16:56 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/10/the-amazing-lands-of-cpp/</guid>
      <description>I’m sure every programmer will like this</description>
      <content:encoded><![CDATA[<p>I’m sure every programmer will like this</p>
<p><a href="/wp-content/uploads/2009/10/cpplands.png"><img loading="lazy" src="/wp-content/uploads/2009/10/cpplands-1024x714.png" alt="cpplands"  title="cpplands"  />
</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
