<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on David Amador</title>
    <link>https://www.david-amador.com/categories/tutorials/</link>
    <description>Recent content in Tutorials on David Amador</description>
    <image>
      <title>David Amador</title>
      <url>https://www.david-amador.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.david-amador.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jul 2013 12:09:48 +0000</lastBuildDate>
    <atom:link href="https://www.david-amador.com/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenGL Camera 2d with zoom and rotation</title>
      <link>https://www.david-amador.com/2013/07/opengl-camera-2d-with-zoom-and-rotation/</link>
      <pubDate>Thu, 11 Jul 2013 12:09:48 +0000</pubDate>
      <guid>https://www.david-amador.com/2013/07/opengl-camera-2d-with-zoom-and-rotation/</guid>
      <description>I’ve been working on OpenGL for some time now and one of the things that some people have asked me is how to do that 2d camera with zoom and rotation in a similar way to a post regarding a XNA 2D Camera I wrote some time ago.
Some of them where just subtracting the camera position to all objects drawn, but that’s just ‘ugly’ in my opinion. And the advantage of using a more complicated (at first glance) system as a matrix is that you can easily apply more complicated operations like scaling and rotation.</description>
    </item>
    <item>
      <title>OpenGL 2D Independent Resolution Rendering</title>
      <link>https://www.david-amador.com/2013/04/opengl-2d-independent-resolution-rendering/</link>
      <pubDate>Mon, 22 Apr 2013 11:22:22 +0000</pubDate>
      <guid>https://www.david-amador.com/2013/04/opengl-2d-independent-resolution-rendering/</guid>
      <description>Around two years ago I made a tutorial for XNA in which you could render 2D games scaled to the current window resolution with proper letter-boxes or pillar-boxes.
As many know since then I moved to C++ and OpenGL, and ocasionally people ask me “Can you still do that independent resolution thing?”, and yes it’s perfectly possible. I’ve used this on all latest Windows, Mac and iOS, in case you are wondering.</description>
    </item>
    <item>
      <title>Xbox 360 Controller Input in C&#43;&#43; via XInput</title>
      <link>https://www.david-amador.com/2012/04/xbox-360-controller-input-in-c-via-xinput/</link>
      <pubDate>Sun, 15 Apr 2012 11:41:27 +0000</pubDate>
      <guid>https://www.david-amador.com/2012/04/xbox-360-controller-input-in-c-via-xinput/</guid>
      <description>So you have that Xbox360 controller laying around and want to connect it to your game?
On XNA this is an out of the box option but if you’re using C++ you have a bit more work to do first.
First of all, you will need the DirecX 9.0+ sdk.
The includes.
&amp;lt;pre lang=&amp;#34;cpp&amp;#34;&amp;gt; #define WIN32_LEAN_AND_MEAN // We don&amp;#39;t want the extra stuff like MFC and such #include &amp;lt;windows&amp;gt; #include &amp;lt;xinput.</description>
    </item>
    <item>
      <title>Using Git for revision control</title>
      <link>https://www.david-amador.com/2011/07/using-git-for-revision-control/</link>
      <pubDate>Fri, 08 Jul 2011 13:29:34 +0000</pubDate>
      <guid>https://www.david-amador.com/2011/07/using-git-for-revision-control/</guid>
      <description>If you are coding, no matter what it is, games, software, websites, you should be using a code revision control of some sort.
Are you using? Cool. Is it Git? Smart choice, so you probably don’t need to read the rest of this post.
For the rest I’m giving some help on how to start from scratch.
First of all I recommend some reading on Revision Control so that you understand what I’m talking about.</description>
    </item>
    <item>
      <title>Making Big Grass Tiled Backgrounds in XNA</title>
      <link>https://www.david-amador.com/2010/04/making-big-grass-tiles-in-xna/</link>
      <pubDate>Mon, 19 Apr 2010 21:57:12 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/04/making-big-grass-tiles-in-xna/</guid>
      <description>I’ve seen this quite a bit around on XNA forums and got 2 emails last week asking about this:
I want to make a 3000×3000 grass background by tiling this small grass image I have. Should I make one big image or should I make a for cycle drawing the image (3000/TileSize) times?
My answer is neither of them. The big image has a huge impact on every Draw and more, you are limiting your map to the max Texture Size the graphic card can handle.</description>
    </item>
    <item>
      <title>XNA 2D Independent Resolution Rendering</title>
      <link>https://www.david-amador.com/2010/03/xna-2d-independent-resolution-rendering/</link>
      <pubDate>Fri, 26 Mar 2010 22:03:31 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/03/xna-2d-independent-resolution-rendering/</guid>
      <description>Note: 22/04/2013 – Due to popular request I made an article about achieving this effect in OpenGL
Independent Resolution Rendering?? What’s this all about?
Basically a way of not caring what you resolution is. Ever had Gui elements misplaced because you changed the resolution? Or getting out of the screen?
If you are doing a game on Xna just for Xbox360 you can basically use a 1280×720 base resolution and the Xbox will scale the game for you making the proper Letterbox.</description>
    </item>
    <item>
      <title>Drawing Lines in XNA</title>
      <link>https://www.david-amador.com/2010/01/drawing-lines-in-xna/</link>
      <pubDate>Tue, 26 Jan 2010 00:40:48 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/01/drawing-lines-in-xna/</guid>
      <description>One of the things I realized is very handy when prototyping or debugging is to draw a line on a specific location. Like drawing lines around collision boxes to see if your character is making a proper collision. For my games I’ve made a small LineBatch.
Basically LineBatch uses a SpriteBatch to draw the lines by stretching a 1×1 white Texture2D to your line size.
You can give it 2 points ( start and end point of course) and a color.</description>
    </item>
    <item>
      <title>Xna Screen Manager</title>
      <link>https://www.david-amador.com/2010/01/xna-screen-manager/</link>
      <pubDate>Sun, 24 Jan 2010 18:47:17 +0000</pubDate>
      <guid>https://www.david-amador.com/2010/01/xna-screen-manager/</guid>
      <description>I know there’s lot’s of this stuff over the internet but I keep bumping into people asking for this.
A way to easily switch from a Game Screen to a Menu or Options without having tons of flags and “if” clauses on the class Game.
I’ve made a small project with a Screen Manager. The ScreenManager is static and can contain Screens. Instead of having typical Draw Update functions drawing SpriteBatches on the Game class we should have something like this:</description>
    </item>
    <item>
      <title>How to do a XNA fps counter</title>
      <link>https://www.david-amador.com/2009/11/how-to-do-a-xna-fps-counter/</link>
      <pubDate>Mon, 23 Nov 2009 17:49:38 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/11/how-to-do-a-xna-fps-counter/</guid>
      <description>Frame rate or FPS, how it is most commonly known is a way for you to know how many images per second is you game drawing. The more the better. Less then 30 and you start to see hiccups.
So how can you measure your frame rate in XNA?
Inside your game1 class declare these vars:
&amp;lt;pre lang=&amp;#34;csharp&amp;#34;&amp;gt;SpriteFont _spr_font; int _total_frames = 0; float _elapsed_time = 0.0f; int _fps = 0; On function LoadContent() do</description>
    </item>
    <item>
      <title>How to do a Xna Log file</title>
      <link>https://www.david-amador.com/2009/11/how-to-do-a-xna-log-file/</link>
      <pubDate>Fri, 20 Nov 2009 10:53:13 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/11/how-to-do-a-xna-log-file/</guid>
      <description>Although the title says XNA log file this is actually a C# log file, I’ve just thrown this title cause lot’s of people search for xna log instead of C# log file.
Many have asked me why take time to do a log file when you can throw exceptions when something goes wrong. Well the answer is simple, to keep track of what’s happening, log steps, write to the file exactly what when wrong even if you are on Release mode, and more, if someone complains the game is crashing you simply ask for the log file and see what when wrong.</description>
    </item>
    <item>
      <title>Using PerfHUD with XNA</title>
      <link>https://www.david-amador.com/2009/11/using-perfhud-with-xna/</link>
      <pubDate>Wed, 18 Nov 2009 15:16:54 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/11/using-perfhud-with-xna/</guid>
      <description>I am definitely a fan of ATI cards. Had a few Geforces but didn’t liked them very much. I actually noticed image quality decrease when switching from an old Radeon 9800 to a Geforce 8k something. I’m very happy with my Radeon 4890, now for the downside, PerfHUD, a very handy tool for Game Developers is only available for NVIDIA chipsets and although ATI has it’s own GPUPerfStudio it’s not the same thing.</description>
    </item>
    <item>
      <title>XNA Camera 2d with zoom and rotation</title>
      <link>https://www.david-amador.com/2009/10/xna-camera-2d-with-zoom-and-rotation/</link>
      <pubDate>Mon, 12 Oct 2009 20:51:21 +0000</pubDate>
      <guid>https://www.david-amador.com/2009/10/xna-camera-2d-with-zoom-and-rotation/</guid>
      <description>07/01/2011 – By popular request updated to XNA 4.0, xna 3.1 code is still there too
One of the things I keep finding is people asking how to do a simple camera 2d in XNA. Today I decided to contribute with my own solution.
Most of the time the solution given is to have a class camera with a Vector2 position and when drawing the sprite batch to subtract the camera position to the sprite position itself.</description>
    </item>
  </channel>
</rss>
